线程的创建方法一：
1. 创建一个继承于Thread类的子类
2. 重写Thread类的run( ) ---> 将此线程要执行的操作，声明在此方法体中
3. 创建当前Thread的子类的对象
4. 通过对象调用start( ): 1.启动线程 2.调用当前线程的run( )

线程的创建方法二：
1. 创建一个实现Runnable接口的类
2. 实现接口中的run( ) --> 将此线程要执行的操作，声明在此方法体中
3. 创建当前实现类的对象
4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的实例
5. Thread类的实例调用start( );


对比两种方式？

共同点：1.启动线程使用的都是Thread类中定义的start()
       2.创建的线程对象，都是Thread类或其子类的实例

不同点：一个是类的继承，一个是接口的实现

建议：使用实现Runnable接口的方式
Runnable方式的好处：1. 实现的方式避免了类的单继承的局限性
                  2. 更适合处理有共享数据的问题
                  3. 实习了代码和数据的分离

联系：public class Thread implements Runnable （代理模式）

